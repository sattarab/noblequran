#---------------------------------------------------------------------
# See the full configuration options online.
#
#   http://haproxy.1wt.eu/download/2.2/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
  # to have these messages end up in /var/log/haproxy.log you will
  # need to:
  #
  # 1) configure syslog to accept network log events.  This is done
  #    by adding the '-r' option to the SYSLOGD_OPTIONS in
  #    /etc/sysconfig/syslog
  #
  # 2) configure local2 events to go to the /var/log/haproxy.log
  #   file. A line like the following can be added to
  #   /etc/sysconfig/syslog
  #
  # local2.*                       /var/log/haproxy.log
  #
  log         127.0.0.1 local2
  chroot      /var/lib/haproxy
  pidfile     /var/run/haproxy.pid
  maxconn     4000
  user        haproxy
  group       haproxy
  daemon

  # turn on stats unix socket
  stats socket /var/lib/haproxy/stats
  server-state-file /var/lib/haproxy/state

  # Distribute the health checks with a bit of randomness
  spread-checks 5

  # https://ssl-config.mozilla.org/#server=haproxy&version=2.2&config=intermediate&openssl=1.0.1k&guideline=5.6
  ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
  ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

  ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
  ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

  # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
  ssl-dh-param-file /etc/haproxy/dhparam.pem

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
  mode                    http
  log                     global
  load-server-state-from-file global
  option                  httplog
  option                  dontlognull
  option http-server-close
  option forwardfor       except 127.0.0.0/8
  option                  redispatch
  retries                 3
  timeout http-request    10s
  timeout queue           1m
  timeout connect         10s
  timeout client          1m
  timeout server          1m
  timeout http-keep-alive 10s
  timeout check           10s
  maxconn                 3000

frontend web
  bind *:80
  bind *:443 ssl crt /var/www/noblequran/ssl/noblequran.cloud.pem

  acl host_noblequran hdr(host) -m end noblequran.cloud
  acl host_test hdr(host) -m beg test.

  # Check the host against the list of domains we have certs for
  acl https_domains_acl hdr(host) -i -f /etc/haproxy/https-domains.txt

  # Use by Let's Encrypt to check that we own the domain
  acl letsencrypt-acl path_beg /.well-known/acme-challenge/

  # Redirect *://www.noblequran.cloud to https://noblequran.cloud
  redirect prefix https://noblequran.cloud code 301 if { hdr(host) -i www.noblequran.cloud } !letsencrypt-acl


  # Redirect HTTP traffic to HTTPS
  # Skip the redirection for let's encrypt challenge
  redirect scheme https code 301 if https_domains_acl !{ ssl_fc } !letsencrypt-acl

  errorfile 502 /etc/haproxy/errors/502.http
  errorfile 503 /etc/haproxy/errors/503.http

  # Use by the Route 53 health check
  # monitor-uri /haproxy-status

  use_backend letsencrypt_backend if letsencrypt-acl

  # If the URL start with /s3 use s3 backend
  # acl s3 path_beg -i /s3
  # use_backend s3 if s3

  use_backend     aws_back_test  if host_test
  default_backend aws_back_main

backend aws_back_main
  mode http
  balance roundrobin

  stick-table type string len 32 size 1M expire 3h
  stick on cookie(JSESSIONID) if { hdr_sub(Cookie) JSESSIONID }

  # Health checking documentation https://www.haproxy.com/doc/aloha/7.0/haproxy/healthchecks.html
  option httpchk GET /status
  http-check expect status 200

  # Set the default check interval to 2 seconds
  # If a server is marked as DOWN the current connection won't be closed
  # See https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#5.2-on-marked-down
  # inter interval between two consecutive health checks
  # fastinter Sets the interval between two consecutive health checks when the server is in any of the transition states: UP - transitionally DOWN or DOWN - transitionally UP. If not set, then inter is used.
  # downinter Sets the interval between two consecutive health checks when the server is in the DOWN state. If not set, then inter is used.
  default-server inter 2s fastinter 2s downinter 2s

  http-response add-header X-Backend main

  http-request set-header X-Forwarded-Proto https if  { ssl_fc }
  http-request set-header X-Forwarded-Proto http  if !{ ssl_fc }

  server prd-back1-main1 3.94.197.246:8081 check inter 1s ssl verify none

backend aws_back_test
  mode http
  balance roundrobin

  stick-table type string len 32 size 1M expire 3h
  stick on cookie(JSESSIONID) if { hdr_sub(Cookie) JSESSIONID }

  # Health checking documentation https://www.haproxy.com/doc/aloha/7.0/haproxy/healthchecks.html
  option httpchk GET /status
  http-check expect status 200

  # Set the default check interval to 2 seconds
  # If a server is marked as DOWN the current connection won't be closed
  # See https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#5.2-on-marked-down
  # inter interval between two consecutive health checks
  # fastinter Sets the interval between two consecutive health checks when the server is in any of the transition states: UP - transitionally DOWN or DOWN - transitionally UP. If not set, then inter is used.
  # downinter Sets the interval between two consecutive health checks when the server is in the DOWN state. If not set, then inter is used.
  default-server inter 2s fastinter 2s downinter 2s

  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header X-Forwarded-Proto http  if !{ ssl_fc }

  server prd-back1-test1 3.94.197.246:8091 check inter 1s ssl verify none

# backend s3
#   # Remove the /s3 in the URL
#   http-request replace-path ^([^\ ]*\ /)s3[/]?(.*)     \1\2

#   # Change the hostname
#   http-request set-header Host s3.amazonaws.com

#   # Remove credential information
#   http-request delete-header ^Authorization:.*
#   http-request delete-header ^Cookie:.*

#   server CDN  s3.amazonaws.com:80 check inter 5000

backend letsencrypt_backend
  server letsencrypt 127.0.0.1:54321

frontend stats
  bind *:8090 ssl crt /var/www/noblequran/ssl/noblequran.cloud.pem no-sslv3
  mode http
  stats enable
  stats hide-version
  stats realm Haproxy\ Statistics
  stats uri /
  stats auth nqOPs:kDtyEMEdBpzxyBCpVndk
